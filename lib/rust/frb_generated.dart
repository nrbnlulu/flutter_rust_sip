// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'core/dart_types.dart';
import 'core/types.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 645017884;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_sip',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Stream<CallInfo> crateApiSimpleAccountSetup({
    required String username,
    required String password,
    required String uri,
    required bool p2P,
  });

  Future<void> crateApiSimpleFfiHangupCalls();

  Future<void> crateApiSimpleInitApp();

  Future<int> crateApiSimpleInitTelephony({
    required int localPort,
    required TransportMode transportMode,
    required OnIncommingCall incomingCallStrategy,
  });

  Future<int> crateApiSimpleMakeCall({
    required String phoneNumber,
    required String domain,
  });
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Stream<CallInfo> crateApiSimpleAccountSetup({
    required String username,
    required String password,
    required String uri,
    required bool p2P,
  }) {
    final callSink = RustStreamSink<CallInfo>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_String(username, serializer);
            sse_encode_String(password, serializer);
            sse_encode_String(uri, serializer);
            sse_encode_bool(p2P, serializer);
            sse_encode_StreamSink_call_info_Sse(callSink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 1,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_telephony_error,
          ),
          constMeta: kCrateApiSimpleAccountSetupConstMeta,
          argValues: [username, password, uri, p2P, callSink],
          apiImpl: this,
        ),
      ),
    );
    return callSink.stream;
  }

  TaskConstMeta get kCrateApiSimpleAccountSetupConstMeta => const TaskConstMeta(
    debugName: "account_setup",
    argNames: ["username", "password", "uri", "p2P", "callSink"],
  );

  @override
  Future<void> crateApiSimpleFfiHangupCalls() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleFfiHangupCallsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleFfiHangupCallsConstMeta =>
      const TaskConstMeta(debugName: "ffi_hangup_calls", argNames: []);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<int> crateApiSimpleInitTelephony({
    required int localPort,
    required TransportMode transportMode,
    required OnIncommingCall incomingCallStrategy,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(localPort, serializer);
          sse_encode_transport_mode(transportMode, serializer);
          sse_encode_on_incomming_call(incomingCallStrategy, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_8,
          decodeErrorData: sse_decode_telephony_error,
        ),
        constMeta: kCrateApiSimpleInitTelephonyConstMeta,
        argValues: [localPort, transportMode, incomingCallStrategy],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitTelephonyConstMeta =>
      const TaskConstMeta(
        debugName: "init_telephony",
        argNames: ["localPort", "transportMode", "incomingCallStrategy"],
      );

  @override
  Future<int> crateApiSimpleMakeCall({
    required String phoneNumber,
    required String domain,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(phoneNumber, serializer);
          sse_encode_String(domain, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: sse_decode_telephony_error,
        ),
        constMeta: kCrateApiSimpleMakeCallConstMeta,
        argValues: [phoneNumber, domain],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMakeCallConstMeta => const TaskConstMeta(
    debugName: "make_call",
    argNames: ["phoneNumber", "domain"],
  );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<CallInfo> dco_decode_StreamSink_call_info_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CallInfo dco_decode_call_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CallInfo(
      callId: dco_decode_i_32(arr[0]),
      state: dco_decode_call_state(arr[1]),
    );
  }

  @protected
  CallState dco_decode_call_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CallState_Early();
      case 1:
        return CallState_Calling();
      case 2:
        return CallState_Connecting();
      case 3:
        return CallState_Confirmed();
      case 4:
        return CallState_Disconnected();
      case 5:
        return CallState_Error(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  OnIncommingCall dco_decode_on_incomming_call(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnIncommingCall.values[raw as int];
  }

  @protected
  TelephonyError dco_decode_telephony_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TelephonyError_CreationError(dco_decode_String(raw[1]));
      case 1:
        return TelephonyError_ConfigError(dco_decode_String(raw[1]));
      case 2:
        return TelephonyError_InitializationError(dco_decode_String(raw[1]));
      case 3:
        return TelephonyError_TransportError(dco_decode_String(raw[1]));
      case 4:
        return TelephonyError_DTMFError(dco_decode_String(raw[1]));
      case 5:
        return TelephonyError_CallCreationError(dco_decode_String(raw[1]));
      case 6:
        return TelephonyError_CallStatusUpdateError(dco_decode_String(raw[1]));
      case 7:
        return TelephonyError_AccountCreationError(dco_decode_String(raw[1]));
      case 8:
        return TelephonyError_TelephonyStartError(dco_decode_String(raw[1]));
      case 9:
        return TelephonyError_TelephonyDestroyError(dco_decode_String(raw[1]));
      case 10:
        return TelephonyError_InputValueError(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TransportMode dco_decode_transport_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransportMode.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<CallInfo> sse_decode_StreamSink_call_info_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CallInfo sse_decode_call_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_callId = sse_decode_i_32(deserializer);
    var var_state = sse_decode_call_state(deserializer);
    return CallInfo(callId: var_callId, state: var_state);
  }

  @protected
  CallState sse_decode_call_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return CallState_Early();
      case 1:
        return CallState_Calling();
      case 2:
        return CallState_Connecting();
      case 3:
        return CallState_Confirmed();
      case 4:
        return CallState_Disconnected();
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return CallState_Error(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt8();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  OnIncommingCall sse_decode_on_incomming_call(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return OnIncommingCall.values[inner];
  }

  @protected
  TelephonyError sse_decode_telephony_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_CreationError(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_ConfigError(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_InitializationError(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_TransportError(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_DTMFError(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_CallCreationError(var_field0);
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_CallStatusUpdateError(var_field0);
      case 7:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_AccountCreationError(var_field0);
      case 8:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_TelephonyStartError(var_field0);
      case 9:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_TelephonyDestroyError(var_field0);
      case 10:
        var var_field0 = sse_decode_String(deserializer);
        return TelephonyError_InputValueError(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TransportMode sse_decode_transport_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TransportMode.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_call_info_Sse(
    RustStreamSink<CallInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_call_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_call_info(CallInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.callId, serializer);
    sse_encode_call_state(self.state, serializer);
  }

  @protected
  void sse_encode_call_state(CallState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CallState_Early():
        sse_encode_i_32(0, serializer);
      case CallState_Calling():
        sse_encode_i_32(1, serializer);
      case CallState_Connecting():
        sse_encode_i_32(2, serializer);
      case CallState_Confirmed():
        sse_encode_i_32(3, serializer);
      case CallState_Disconnected():
        sse_encode_i_32(4, serializer);
      case CallState_Error(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt8(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_on_incomming_call(
    OnIncommingCall self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_telephony_error(
    TelephonyError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TelephonyError_CreationError(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_ConfigError(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_InitializationError(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_TransportError(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_DTMFError(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_CallCreationError(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_CallStatusUpdateError(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_AccountCreationError(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_TelephonyStartError(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_TelephonyDestroyError(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_String(field0, serializer);
      case TelephonyError_InputValueError(field0: final field0):
        sse_encode_i_32(10, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_transport_mode(TransportMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
